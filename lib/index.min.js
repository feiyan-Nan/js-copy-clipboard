'use strict';

function _typeof(obj) {
  '@babel/helpers - typeof';
  if (typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol') {
    _typeof = function _typeof(obj) {
      return typeof obj;
    };
  } else {
    _typeof = function _typeof(obj) {
      return obj &&
        typeof Symbol === 'function' &&
        obj.constructor === Symbol &&
        obj !== Symbol.prototype
        ? 'symbol'
        : typeof obj;
    };
  }
  return _typeof(obj);
}

function _createForOfIteratorHelper(o) {
  if (typeof Symbol === 'undefined' || o[Symbol.iterator] == null) {
    if (Array.isArray(o) || (o = _unsupportedIterableToArray(o))) {
      var i = 0;
      var F = function F() {};
      return {
        s: F,
        n: function n() {
          if (i >= o.length) return { done: true };
          return { done: false, value: o[i++] };
        },
        e: function e(_e) {
          throw _e;
        },
        f: F,
      };
    }
    throw new TypeError(
      'Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.'
    );
  }
  var it,
    normalCompletion = true,
    didErr = false,
    err;
  return {
    s: function s() {
      it = o[Symbol.iterator]();
    },
    n: function n() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function e(_e2) {
      didErr = true;
      err = _e2;
    },
    f: function f() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    },
  };
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === 'string') return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === 'Object' && o.constructor) n = o.constructor.name;
  if (n === 'Map' || n === 'Set') return Array.from(o);
  if (n === 'Arguments' || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n))
    return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}

!(function (window) {
  function copyClipboard(params) {
    var str = '\n';

    var _iterator = _createForOfIteratorHelper(params),
      _step;

    try {
      for (_iterator.s(); !(_step = _iterator.n()).done; ) {
        var val = _step.value;
        str += val + '\n';
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }

    window.document.addEventListener('copy', function (event) {
      // console.log('复制了');
      // 使用ClipboardApi来设置剪贴板里的内容
      var clipboardData = event.clipboardData || window.clipboardData;

      if (!clipboardData) {
        return;
      }

      var text = window.getSelection().toString();

      if (text) {
        event.preventDefault();
        clipboardData.setData('text/plain', text + str);
      }
    });
  }

  if (
    typeof define === 'function' &&
    _typeof(define.amd) === 'object' &&
    define.amd
  ) {
    // AMD. Register as an anonymous module.
    define(function () {
      return copyClipboard;
    });
  } else if (typeof module !== 'undefined' && module.exports) {
    module.exports = copyClipboard;
    module.exports.copyClipboard = copyClipboard;
  } else {
    window.copyClipboard = copyClipboard;
  }
})(window);
